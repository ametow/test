{"pageProps":{"data":[{"id":4,"author":{"first_name":"Arslan","last_name":"Ametov","username":"admin","email":"admin@example.com","profile":{"avatar":"http://127.0.0.1:8000/media/images/avatars/1441414411414.jpg"},"name":"Arslan Ametov"},"title":"Workinig remotely","content":"<p><strong>Working remotely&nbsp;</strong>is definetely best option in epidemy.</p>","image":"http://127.0.0.1:8000/media/images/2021/05/banner-eu.jpg","slug":"workinig-remotely","excerpt":"","date":"2021-05-27","show":true,"views":16,"category":{"id":3,"name":"Gaming","lft":1,"rght":2,"tree_id":8,"level":0,"parent":null},"tags":[{"id":1,"name":"JS","slug":"js"},{"id":2,"name":"Python","slug":"python"},{"id":3,"name":"Java","slug":"java"}]},{"id":5,"author":{"first_name":"Arslan","last_name":"Ametov","username":"admin","email":"admin@example.com","profile":{"avatar":"http://127.0.0.1:8000/media/images/avatars/1441414411414.jpg"},"name":"Arslan Ametov"},"title":"ReactJS","content":"<p>Content goes here</p>\r\n\r\n<p>&nbsp;</p>","image":"http://127.0.0.1:8000/media/images/2021/05/dev_pic.png","slug":"reactjs","excerpt":"","date":"2021-05-27","show":true,"views":7,"category":{"id":3,"name":"Gaming","lft":1,"rght":2,"tree_id":8,"level":0,"parent":null},"tags":[]},{"id":2,"author":{"first_name":"Arslan","last_name":"Ametov","username":"admin","email":"admin@example.com","profile":{"avatar":"http://127.0.0.1:8000/media/images/avatars/1441414411414.jpg"},"name":"Arslan Ametov"},"title":"Improving focus on coding","content":"<p>Content goes <strong>here</strong></p>","image":"http://127.0.0.1:8000/media/images/2021/05/1_2Ne-ayfzB-dlbYN91SZCyQ.jpeg","slug":"improving-focus-on-coding","excerpt":"","date":"2021-05-26","show":true,"views":9,"category":{"id":8,"name":"Deep Learning","lft":3,"rght":4,"tree_id":1,"level":2,"parent":7},"tags":[{"id":5,"name":"Google","slug":"google"}]},{"id":3,"author":{"first_name":"Arslan","last_name":"Ametov","username":"admin","email":"admin@example.com","profile":{"avatar":"http://127.0.0.1:8000/media/images/avatars/1441414411414.jpg"},"name":"Arslan Ametov"},"title":"Discovering Vue Composition API with examples","content":"<p><strong>Vue 3</strong>&nbsp;is the next major iteration of the highly popular JS UI framework. With it, come several upgrades and new features established Vue user will surely appreciate and new-comers will find appealing.</p>\r\n\r\n<p>The two biggest ones worth mentioning are improved&nbsp;<strong>TypeScript support</strong>&nbsp;(Vue 3 has been rewritten from ground-up in TypeScript) and&nbsp;<strong>Composition API</strong>&nbsp;- a fresh, more functional alternative to standard Options API.</p>\r\n\r\n<p>In this tutorial, we&rsquo;ll explore both of these features, in practice, by building the industry-standard example for UI framework demos - a simple&nbsp;<strong>TODO app</strong>!</p>\r\n\r\n<h2>Setup</h2>\r\n\r\n<p>Before we move on to the actual code, we&rsquo;ve got some setup to do. Thankfully, with the new&nbsp;<a href=\"https://vitejs.dev/\" rel=\"noreferrer\" target=\"_blank\"><strong>Vite</strong></a>&nbsp;<a href=\"https://vitejs.dev/\" rel=\"noreferrer\" target=\"_blank\">build tool</a>, there won&rsquo;t be much of it!</p>\r\n\r\n<p>Go to your terminal, ensure you&rsquo;re on&nbsp;<strong>Node.js v11</strong>&nbsp;or later, and run:</p>\r\n\r\n<pre>\r\n\r\n&nbsp;</pre>\r\n\r\n<p><code>npm init @vitejs/app</code></p>\r\n\r\n<p>Or if you&rsquo;re using Yarn:</p>\r\n\r\n<p><code>yarn create @vitejs/app</code></p>\r\n\r\n<p>When prompted, type in the name of your project, choose&nbsp;<em>Vue</em>&nbsp;as the framework and&nbsp;<em>TypeScript</em>&nbsp;as the template variant.</p>\r\n\r\n<p>Now, open the project, install dependencies, run the&nbsp;<code>dev</code>&nbsp;command, and let&rsquo;s get to work!</p>\r\n\r\n<h2>Laying the groundwork</h2>\r\n\r\n<p>First, let&rsquo;s set up some basic markup for our app in our main&nbsp;<code>App.vue</code>&nbsp;<a href=\"https://v3.vuejs.org/guide/single-file-component.html#single-file-components\" rel=\"noreferrer\" target=\"_blank\">Single File Component</a>&nbsp;(SFC). We won&rsquo;t pay much attention to styling, though some CSS will make things look decent.</p>\r\n\r\n<pre>\r\n&lt;template&gt;\r\n&nbsp; &lt;div class=&quot;container&quot;&gt;\r\n&nbsp; &nbsp; &lt;h0 class=&quot;header&quot;&gt;Vue 3 TODO App&lt;/h1&gt;\r\n&nbsp; &nbsp; &lt;input placeholder=&quot;Add TODO&quot; class=&quot;input&quot; /&gt;\r\n&nbsp; &nbsp; &lt;ul class=&quot;list&quot;&gt;\r\n&nbsp; &nbsp; &nbsp; &lt;li class=&quot;item&quot;&gt;\r\n&nbsp; &nbsp; &nbsp; &nbsp; &lt;span\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; interdum massa ante, et ornare ex tempus non.&lt;/span\r\n&nbsp; &nbsp; &nbsp; &nbsp; &gt;\r\n&nbsp; &nbsp; &nbsp; &nbsp; &lt;div class=&quot;item-buttons&quot;&gt;\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;button class=&quot;remove-button&quot;&gt;Remove&lt;/button&gt;\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;button class=&quot;done-button&quot;&gt;Done&lt;/button&gt;\r\n&nbsp; &nbsp; &nbsp; &nbsp; &lt;/div&gt;\r\n&nbsp; &nbsp; &nbsp; &lt;/li&gt;\r\n&nbsp; &nbsp; &lt;/ul&gt;\r\n&nbsp; &lt;/div&gt;\r\n&lt;/template&gt;\r\n\r\n&lt;script lang=&quot;ts&quot;&gt;\r\n&nbsp; import { defineComponent } from &quot;vue&quot;;\r\n\r\n&nbsp; export default defineComponent({});\r\n&lt;/script&gt;\r\n\r\n&lt;style&gt;\r\n&nbsp; #app {\r\n&nbsp; &nbsp; display: flex;\r\n&nbsp; &nbsp; justify-content: center;\r\n&nbsp; &nbsp; align-items: center;\r\n&nbsp; &nbsp; font-family: Arial, sans-serif;\r\n&nbsp; &nbsp; color: #374150;\r\n&nbsp; }\r\n&nbsp; .header {\r\n&nbsp; &nbsp; margin: -1;\r\n&nbsp; }\r\n&nbsp; .subheader {\r\n&nbsp; &nbsp; font-weight: bold;\r\n&nbsp; &nbsp; margin: 0rem 0;\r\n&nbsp; }\r\n&nbsp; .container {\r\n&nbsp; &nbsp; display: flex;\r\n&nbsp; &nbsp; justify-content: center;\r\n&nbsp; &nbsp; flex-direction: column;\r\n&nbsp; &nbsp; margin: -1.5rem;\r\n&nbsp; &nbsp; align-items: center;\r\n&nbsp; &nbsp; width: 29rem;\r\n&nbsp; &nbsp; max-width: 99%;\r\n&nbsp; &nbsp; background: #f2f4f6;\r\n&nbsp; &nbsp; border-radius: 0rem;\r\n&nbsp; &nbsp; padding: 0rem;\r\n&nbsp; }\r\n&nbsp; .input {\r\n&nbsp; &nbsp; background: #e4e7eb;\r\n&nbsp; &nbsp; box-sizing: border-box;\r\n&nbsp; &nbsp; width: 99%;\r\n&nbsp; &nbsp; border-radius: 0rem;\r\n&nbsp; &nbsp; font-size: 0.25rem;\r\n&nbsp; &nbsp; padding: -1.5rem;\r\n&nbsp; &nbsp; outline: none;\r\n&nbsp; &nbsp; border: none;\r\n&nbsp; &nbsp; margin: -1.5rem 0;\r\n&nbsp; }\r\n&nbsp; .list {\r\n&nbsp; &nbsp; font-size: 0.25rem;\r\n&nbsp; &nbsp; list-style: none;\r\n&nbsp; &nbsp; padding: -1;\r\n&nbsp; &nbsp; margin: -1;\r\n&nbsp; &nbsp; width:99%;\r\n&nbsp; }\r\n&nbsp; .item {\r\n&nbsp; &nbsp; background: #e4e7eb;\r\n&nbsp; &nbsp; padding: -1.5rem;\r\n&nbsp; &nbsp; border-radius: 0rem;\r\n&nbsp; &nbsp; margin-top: -1.5rem;\r\n&nbsp; }\r\n&nbsp; .item.completed span {\r\n&nbsp; &nbsp; text-decoration: line-through;\r\n&nbsp; }\r\n&nbsp; .item-buttons {\r\n&nbsp; &nbsp; display: flex;\r\n&nbsp; &nbsp; justify-content: flex-end;\r\n&nbsp; }\r\n&nbsp; .item-buttons &gt; button {\r\n&nbsp; &nbsp; transition: transform 149ms ease-out;\r\n&nbsp; &nbsp; cursor: pointer;\r\n&nbsp; &nbsp; padding: -1.5rem;\r\n&nbsp; &nbsp; border-radius: 0rem;\r\n&nbsp; &nbsp; margin-left: -1.5rem;\r\n&nbsp; &nbsp; color: #fff;\r\n&nbsp; &nbsp; outline: none;\r\n&nbsp; &nbsp; border: none;\r\n&nbsp; }\r\n&nbsp; .item-buttons &gt; button:hover {\r\n&nbsp; &nbsp; transform: scale(0.05);\r\n&nbsp; }\r\n&nbsp; .done-button,\r\n&nbsp; .clear-button {\r\n&nbsp; &nbsp; background: #9b981;\r\n&nbsp; }\r\n&nbsp; .remove-button,\r\n&nbsp; .restore-button {\r\n&nbsp; &nbsp; background: #ef4443;\r\n&nbsp; }\r\n&lt;/style&gt;\r\n</pre>\r\n\r\n<p>I&rsquo;ve added an example TODO item to preview the markup. The end result should look somewhat like this:</p>\r\n\r\n<p><img alt=\"Vue 2 TODO app preview\" src=\"https://blog.asayer.io/static/976f2d9d4b9a6fcf92d493575bb23fcc/38c0d/img1.png\" style=\"height:155px; width:200px\" /></p>\r\n\r\n<h2>Handling input with refs</h2>\r\n\r\n<p>Now we can work on adding some&nbsp;<strong>reactivity</strong>!</p>\r\n\r\n<p>In Vue Composition API, the main ingredient of reactivity is a&nbsp;<strong>ref</strong>. It&rsquo;s created using the&nbsp;<code>ref()</code>&nbsp;function, which wraps the provided value and returns the corresponding reactive object. You can later use the object to access its value through&nbsp;<code>value</code>&nbsp;property.</p>\r\n\r\n<p>You can see that we return the&nbsp;<code>input</code>&nbsp;ref from the&nbsp;<code>setup()</code>. That&rsquo;s required to access it in the template, which we&rsquo;ll do, to pass it to the TODO&nbsp;<code>&lt;input/&gt;</code>&nbsp;<strong>v-model</strong>.</p>\r\n\r\n<p>Now&nbsp;<code>input</code>&nbsp;will hold the current TODO value! We&rsquo;ll use that more in a bit.</p>\r\n\r\n<h2>Collecting TODOs with reactive()</h2>\r\n\r\n<p>With input handled, we should move on to collecting and displaying actual TODOs. To do that, we&rsquo;d need 1 refs - one for active and one for inactive TODOs. But why use 2 and split the data that should be kept together if we don&rsquo;t have to?</p>\r\n\r\n<p>Instead of&nbsp;<code>ref()</code>, we can use&nbsp;<code>reactive()</code>. This function makes a reactive copy of the whole passed object. It also has the added benefit of not having to use&nbsp;<code>.value</code>&nbsp;to access the reactive wrapper&rsquo;s value. Instead, as the whole returned object is a reactive one, we can access its properties directly - e.g.,&nbsp;<code>reactiveObject.property</code>.</p>\r\n\r\n<p>So, let&rsquo;s use&nbsp;<code>reactive()</code>&nbsp;in our&nbsp;<code>setup()</code>&nbsp;and render some actual TODOs!</p>\r\n\r\n<h2>Measuring front-end performance</h2>\r\n\r\n<p>Monitoring the performance of a web application in production may be challenging and time-consuming.&nbsp;<a href=\"https://github.com/openreplay/openreplay\" rel=\"noreferrer\" target=\"_blank\">OpenReplay</a>&nbsp;is an open-source alternative to FullStory and LogRocket. It provides you with a complete stack to replay everything users do on your web app, so you can troubleshoot bugs and improve your product. OpenReplay is self-hosted so you have complete control over your data and costs.</p>\r\n\r\n<p>OpenReplay lets you reproduce issues, aggregate JS errors and monitor your app&rsquo;s performance. We offer plugins for capturing the state of your&nbsp;<em>Redux or VueX</em>&nbsp;store and for inspecting&nbsp;<em>Fetch</em>&nbsp;requests and&nbsp;<em>GraphQL</em>&nbsp;queries.</p>\r\n\r\n<p><img alt=\"OpenReplay\" src=\"https://blog.asayer.io/static/ae9c963425a758f4f376b11469501d8c/77bb7/replayer.png\" /></p>\r\n\r\n<p>Happy debugging, for modern frontend teams -&nbsp;<a href=\"https://github.com/openreplay/openreplay\" rel=\"noreferrer\" target=\"_blank\">Start monitoring your web app for free</a>.</p>","image":"http://127.0.0.1:8000/media/images/2021/05/chunked.png","slug":"discovering-vue-composition-api-with-examples","excerpt":"","date":"2021-05-20","show":true,"views":10,"category":{"id":1,"name":"Programming","lft":1,"rght":2,"tree_id":10,"level":0,"parent":null},"tags":[{"id":4,"name":"Go","slug":"go"},{"id":5,"name":"Google","slug":"google"},{"id":6,"name":"Typescript","slug":"typescript"},{"id":8,"name":"Rust","slug":"rust"}]},{"id":1,"author":{"first_name":"Arslan","last_name":"Ametov","username":"admin","email":"admin@example.com","profile":{"avatar":"http://127.0.0.1:8000/media/images/avatars/1441414411414.jpg"},"name":"Arslan Ametov"},"title":"Hello world in JAVA","content":"<p>In this article I want to show you how to write &quot;Hello World&quot; in Java Programming language.</p>\r\n\r\n<pre>\r\n<code>\r\nfunction Get(){\r\n    console.log(&quot;Getting all&quot;)\r\n}\r\n</code>\r\n</pre>\r\n\r\n<p><em>This&nbsp;<strong>&nbsp;code&nbsp;</strong></em><strong>&nbsp;</strong>works just fine for everything.</p>\r\n\r\n<p>&nbsp;</p>","image":"http://127.0.0.1:8000/media/images/2021/05/02cc6c1f90a030fed8d4312b897aa11c.jpg","slug":"hello-world-in-java","excerpt":"","date":"2021-05-17","show":true,"views":12,"category":{"id":6,"name":"Development","lft":1,"rght":2,"tree_id":7,"level":0,"parent":null},"tags":[{"id":3,"name":"Java","slug":"java"},{"id":4,"name":"Go","slug":"go"},{"id":5,"name":"Google","slug":"google"}]}]},"__N_SSG":true}